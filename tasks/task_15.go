package main

import (
	"fmt"
	"math/rand"
	"strings"
)

func createHugeString(n int) string {
	// Работая с реально очень большими строками нужно учитывать,
	// расход памяти. В данном примере сгенерируем строку из заданных n случайных рун
	var somerunes = []rune{'A', 'B', 'C', 'D', 'г', 'ж', 'ъ', 'ф', 'ぁ', 'ス', 'ゟ', 'ヺ'}
	var str strings.Builder

	for i := 0; i < n; i++ {
		randomIndex := rand.Intn(len(somerunes))
		str.WriteRune(somerunes[randomIndex])
	}
	return str.String()
}

/* 
	Работа с глобальными переменными должна быть оправдана
 	Глобальная перменная создается в куче, а работа в куче медленнее,
 	чем созданная локальная переменная в стеке.
	Также - слишком большие локальные переменные могут быть отправлены в кучу,
	что также нужно помнить
*/
var justString string

func someFunc() {
	v := createHugeString(1 << 10)
	/* 
	В данном случае мы делаем обрезку по байтам, а не символам
	поэтому юникод символы состоящие из 2 и более байт могут быть обрезаны.

	Также, тк мы создаем срез - то в памяти удерживается вся огромная строка v
	на которую ссылается срез. В таком случае нужно создавать новый объект в памяти
	
	justString = v[:100]
	*/
	
	// получаем срез рун 
	r := []rune(v)

	// присваемаем переменной новую строку из среза рун
	justString = string(r[:100])
}



func main() {
	someFunc()
	fmt.Println(justString)
}
